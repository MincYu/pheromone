syntax = "proto3";

import "common.proto";

enum FunctionLang {
  CPP = 0;

  PYTHON = 1;
}

message Function {
  // The name of this function.
  string name = 1;

  FunctionLang lang = 2;
  
  // The serialized representation of this function.
  bytes body = 3;
}

enum DependencyType {
  DIRECT = 0;
  MANY_TO_ONE = 1;
  K_OUT_OF_N = 2;
  PERIODIC = 3;
  // CONDITION = 4;
}

message DataDependency{
  DependencyType type = 1;

  repeated string src_functions = 2; 

  repeated string tgt_functions = 3;

  bytes description = 4;

  // // Required when there is multiple instances of one function
  // repeated uint32 src_ids = 4;

  // repeated uint32 tgt_ids = 5;
}

message AppRegistration {
  string app_name = 1;

  repeated string functions = 2;

  repeated DataDependency dependencies = 3;
}

message Argument {
  bytes body = 1;

  uint32 arg_flag = 2;

  string data_address = 3;
}

message ArgResp {
  bytes body = 1;

  string key = 2;

  int32 keylen = 3;
}
// // A list of Values that represents the arguments for a particular function
// // call.
// message Arguments {
//   // The set of arguments.
//   repeated Argument args = 1;
// }

message FunctionRequest{
  string name = 1;
   
  // uint32 id = 2;

  // The arguments to be passed into the function.
  repeated Argument arguments = 2;
}

// A request to execute a pre-registered function a single time.
message FunctionCall {
  // The name of the fucntion to execute.
  string app_name = 1;

  repeated FunctionRequest requests = 2;

  // the worker issuing internal call (optional)
  string source = 3;

  // A unique ID used to match asynchronous requests to responses.
  string request_id = 4;

  // the client address, used for synchronous requests.
  string resp_address = 5;

  // An optional field that allows the user to specify where the server should
  // store the result of the request. If none is specified, one is
  // automatically generated and returned to the user.
  string response_key = 6;
}

message FunctionCallResponse {
  string app_name = 1;

  string request_id = 2;

  // string response_key = 3;
  bytes output = 3;

  uint32 error_no = 4;
}

message CoordSync {
  string public_ip = 1;

  string private_ip = 2;

  uint32 thread_id = 3;

  // optional
  uint32 workload = 4;
}

message CoordQuery {
  string application = 1;

  string request_id = 2;
}

message CoordResponse {
  string coord_ip = 1;

  uint32 thread_id = 2;

  string request_id = 3;
}

enum BucketOperationType {
  // create bucket.
  CREATE_BUCKET = 0;

  // delete bucket
  DELETE_BUCKET = 1;
}

enum TriggerOperationType {
  // manage triggers 
  ADD_TRIGGER = 0;

  DELETE_TRIGGER = 1;
}

enum PrimitiveType {
  IMMEDIATE = 0;
  BY_NAME = 1;
  BY_BATCH_SIZE = 2;
  BY_SET = 3;
  DYNAMIC_GROUP = 4;
  REDUNDANT = 5;
  BY_TIME = 6;
}

message BucketOperationRequest {
  BucketOperationType operation_type = 1;

  string app_name = 2;

  string bucket_name = 3;
  
  ValueType bucket_type = 4;

  string request_id = 5;

  string response_address = 6;
}

message BucketOperationResponse {
  BucketOperationType operation_type = 1;

  string bucket_name = 2;
  
  string response_id = 3;

  KVSError error = 4;
}

message TriggerOperationRequest {
  TriggerOperationType operation_type = 1;

  string app_name = 2;

  string bucket_name = 3;

  string trigger_name = 4;
  
  uint32 trigger_option = 5;
  
  PrimitiveType primitive_type = 6;
  
  bytes primitive = 7;

  string request_id = 8;

  string response_address = 9;
}

message TriggerOperationResponse {
  TriggerOperationType operation_type = 1;

  string bucket_name = 2;

  string trigger_name = 3;
  
  string response_id = 4;

  KVSError error = 5;
}

message ImmediatePrimitive {
  // The function to trigger, can be name, http endpoint, etc. 
  string function = 1;

  // uint32 id = 2;
}

message ByNamePrimitive {
  // The function to trigger, can be name, http endpoint, etc. 
  string function = 1;

  // uint32 id = 2;

  string key_name = 2;
}

message ByBatchSizePrimitive {
  // The function to trigger, can be name, http endpoint, etc. 
  string function = 1;

  // uint32 id = 2;

  uint32 count = 2;
}

message BySetPrimitive {
  // The function to trigger, can be name, http endpoint, etc. 
  string function = 1;
  
  // uint32 id = 2;

  repeated string key_set = 2;
}

message DynamicGroupPrimitive {
  string function = 1;

  repeated string control_group = 2;
}

message RedundantPrimitive {
  string function = 1;

  uint32 k = 2;

  uint32 n = 3;
}

message ByTimePrimitive {
  // The function to trigger, can be name, http endpoint, etc. 
  string function = 1;

  uint32 time_window = 2;
}


message UpdateStatusMessage {
  string ip = 1;

  uint32 avail_executors = 2;

  repeated string functions = 3;
}

message TriggerEntity {
  string bucket_name = 1;

  string trigger_name = 2;

  uint32 trigger_option = 3;
  
  PrimitiveType primitive_type = 4;
  
  bytes primitive = 5;
}

message UpdateCoordMsg {
  string ip = 1;

  uint32 thread_id = 2;

  string app_name = 3;

  repeated string functions = 4;

  repeated DataDependency dependencies = 5;

  repeated TriggerEntity triggers = 6;

  uint32 msg_type = 7;
}